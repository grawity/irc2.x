  IRC Services
  Christophe Kalt
  $Id: SERVICE.txt,v 1.5 1997/09/09 19:15:00 kalt Exp $

  The IRC protocol described in RFC 1459 defines two types of connec-
  tions (client, and server).  A third type was introduced with version
  2.9 of the IRC software: service connections.  This document describes
  what services are, and how to use them.

  11..  AA nneeww ttyyppee ooff ccoonnnneeccttiioonn

  A service connection is something between a client and a server
  connection.  It is not closer from any, as a matter of fact, the scope
  is pretty broad.

  11..11..  AA bbiitt cclliieenntt

  services are similar to clients because they cannot:

  +o  introduce other clients, services, or servers.

  +o  change the global state of the net. (kill, squit..)

  11..22..  AA bbiitt sseerrvveerr

  services are similar to servers because:

  +o  they cannot join channels.

  +o  they are not limited by flood control or penalty.

  +o  they can see all users, servers, services.

  +o  they can see all channel names.

  +o  they cannot freely connect to a server.

  +o  they may optionally receive a connection burst.

  11..33..  RReeaallllyy uunniiqquuee

  services are unique because:

  +o  they are not subject to collisions.

  +o  they can be local to one, or more servers, or global.

  +o  they can only send notices, not private messages.

  +o  they can only be contacted by the use of SQUERY.

  Services are not meant to be used interactively, but provide adequate
  support for automatons, statistic gathering, monitoring.


  22..  WWhhaatt uusseerrss sseeee

  This section covers the aspects visible to the users.

  22..11..  &&SSEERRVVIICCEESS

  This is a special channel, similar to &SERVERS, on which are sent
  notices when a service connects to or quit the net.



  22..22..  SSEERRVVLLIISSTT

  This new command gives the list of services currently present on the
  IRC network.  It can take two arguments.

  1. a mask to limit the output to the services which names matches the
     mask.

  2. a type to list only services of a specific type.

     It returns a list of servers using numeric 234, the different
     fields are:

  +o  The service name.

  +o  The name of the server which introduced it on the net.

  +o  The ``distribution'' mask.

  +o  The service ``type''.

  +o  The hop count between you and the service.

  +o  A comment.

  22..33..  SSQQUUEERRYY

  This new command stands for ``Service Query''.  The first argument is
  the service name, and the second the text to be sent to the service.


  33..  HHooww ttoo sseett uupp aa sseerrvviiccee

  33..11..  CCoommppiillee ttiimmee ooppttiioonn ffoorr tthhee sseerrvveerr

  First of all, it is important to note that in order to be able to
  connect a service to a server, this server must have been compiled
  with ``UUSSEE__SSEERRVVIICCEESS'' defined in the config.h file.  To know if your
  server has been compiled with this option, check the version:

  351 Server irc.stealth.net: 2.9.3. AaCeEFiIkMu$_V1

  351 Server irc.pvv.unit.no: 2.9.3. AaeEFHiKMpsstuYZ_V1

  Here, only ``irc.pvv.unit.no'' was compiled with the ``USE_SERVICES''
  defined as the lowercase ``s'' shows in the version string.

  As they are special clients, services need to be allowed access to the
  server in the configuration file.  Each service needs its own access
  to be setup.  This is gone by adding an S: line to the configuration
  file.  This lines defines the name of the service, as well as the
  type.

  33..22..  GGlloossssaarryy

  Services have two main characteristics:


     TTyyppee
        This is a misleading name.  The type is actually a bit mask
        which defines what information the service can see.  The server
        configuration file limits the type allowed for a service.  The
        meaning of the bits is defined in the service.h file coming with
        the IRC software:


        SERVICE_WANT_SERVICE    0x00000001 /* other services signing on/off */
        SERVICE_WANT_OPER       0x00000002 /* operators, included in umodes too */
        SERVICE_WANT_UMODE      0x00000004 /* user modes, iow + local modes */
        SERVICE_WANT_AWAY       0x00000008 /* away isn't propaged anymore.. */
        SERVICE_WANT_KILL       0x00000010 /* KILLs */
        SERVICE_WANT_NICK       0x00000020 /* all NICKs (new user, change) */
        SERVICE_WANT_USER       0x00000040 /* USER signing on */
        SERVICE_WANT_QUIT       0x00000080 /* all QUITs (users signing off) */
        SERVICE_WANT_SERVER     0x00000100 /* servers signing on */
        SERVICE_WANT_WALLOP     0x00000200 /* wallops */
        SERVICE_WANT_SQUIT      0x00000400 /* servers signing off */
        SERVICE_WANT_RQUIT      0x00000800 /* regular user QUITs (these which
                                           are also sent between servers) */
        SERVICE_WANT_MODE       0x00001000 /* channel modes (not +ov) */
        SERVICE_WANT_CHANNEL    0x00002000 /* channel creations/destructions */

        SERVICE_WANT_ERRORS     0x01000000 /* &ERRORS */
        SERVICE_WANT_NOTICES    0x02000000 /* &NOTICES */
        SERVICE_WANT_LOCAL      0x04000000 /* &LOCAL */
        SERVICE_WANT_NUMERICS   0x08000000 /* &NUMERICS */

        SERVICE_WANT_USERLOG    0x10000000 /* FNAME_USERLOG */
        SERVICE_WANT_CONNLOG    0x20000000 /* FNAME_CONNLOG */



     DDiissttrriibbuuttiioonn
        This controls the propagation of the service.  The distribution
        is checked against server names, the service will only be on
        servers which names matches the distribution.

        It also eventually limits the information received by the
        service (depending on the service type).  A service will not
        have any information concerning users or services connected to a
        server which name does not match the distribution.

        Examples:

        iirrcc..ffuunneett..ffii
           Using a server name as distribution makes the service local
           to the particular server.

        **..ffrr
           This would match any server in the toplevel ``fr''.

        **  This is the distribution to be used to make the service
           global.

        It is important to note that the path between the service and a
        server mmuusstt be composed of servers which have matching names:

        trondheim.irc.no <----> ircd.funet.fi <-----> oslo.irc.no
               ^  ^
               |  |
               |  +------> bergen.irc.no
               |
               +-------[MyService - Distribution *.no]


     As shown above, if two ``*.no'' servers have a non ``*.no'' (for
     example here a ``*.fi'') server connected between them, in this
     case the information related to ``MyService'' will not propagate to
     ``oslo.irc.no''.

     This means that the service will see information concerning the ``3
     *.no'' servers, but ``oslo.irc.no'' will have no knowledge of the
     presence of ``MyService''.  Also, the service is unable to send
     anything thru ``ircd.funet.fi''.

  33..33..  SSiiggnniinngg oonn aass aa sseerrvviiccee

  Once the S: line setup on the server, the service connects by sending
  the password (PASS command), and then issuing a ``SERVICE'' command:

  SERVICE servicename servername distribution servicetype 0 :Information

     sseerrvviicceennaammee
        This is the name of the service as configured by the S line.

     sseerrvveerrnnaammee
        This is ignored by the server.

     ddiissttrriibbuuttiioonn
        This is the distribution mask for this connection.

     sseerrvviicceettyyppee
        This is the service type as configured by the S line.  (It must
        match)

     IInnffoorrmmaattiioonn
        This is any information.  It will be sent in ``SERVLIST''
        replies and should be a short description of the service.

  A successfull registering of a service at the server will result in a
  RPL_YOURESERVICE (383) being sent back to the service. Any other reply
  as a result of sending service indicates an error has occured.

  33..44..  RReeqquueessttiinngg ddaattaa ffrroomm tthhee sseerrvveerr

  Once the connection is established, the service needs to issue a
  ``SERVSET'' command to receive the data it wants:

  SERVSET mask1 mask2

     mmaasskk11
        It is a subset of the service type.  It defines what the kind of
        information the service wants to receive for this particular
        connection.

        This mask can also have the following bits set, regardless of
        what the S line setting is:

        SERVICE_WANT_PREFIX     0x10000 /* to receive n!u@h instead of n */
        SERVICE_WANT_TOKEN      0x20000 /* use server token instead of name */
        SERVICE_WANT_EXTNICK    0x40000 /* user extended NICK syntax */



     mmaasskk22
        It is optional.  It is a subset of mask1 that defines which
        information the service wants to receive in a ``connection
        burst''.  The information is similar to a server ``connection
        burst'', it describe the current set of the network.  The
        service can therefore store the information in memory and update
        it.

     NNoottee
        The ``SERVSET'' command can only be issued once.




  44..  GGeenneerraall nnootteess ffoorr sseerrvveerr aanndd sseerrvviiccee aaddmmiinniissttrraattoorrss

  44..11..  UUsseerr pprriivvaaccyy

  Services can see almost as much information as a server.  This means
  that granting a service connection should be considered with as much
  care as granting a server connection.  In particular, the service type
  should be limited to the strict minimum needed for the service to be
  operational.  In most cases, a service type of 0 is enough.

  A great care should be taken to make sure that a service cannot be
  (ab)used to obtain information not normally accessible to users (such
  as showing invisible users). AAddmmiinniissttrraattoorrss mmuusstt rreemmeemmbbeerr tthhaatt tthhee
  pprriivvaaccyy ooff tthhee uusseerrss iiss aatt ssttaakkee.

  44..22..  GGuuiiddeelliinneess

  To avoid confusion, it is a good idea to obey the following simple
  rules:

     NNaammee
        The name should be descriptive, and if possible unique on the
        network.

     IInnffoorrmmaattiioonn
        The service ``information'' should be short and descriptive.

     MMaannddaattoorryy qquueerriieess
        The service must reply to at least 2 queries:

        AADDMMIINN
           Name and e-mail address of the administrator.

        HHEELLPP
           List of queries understood by the service.  Each query should
           also have an help.

     BBaassiicc qquueerriieess
        These queries should also be understood by the service:

        IINNFFOO
           This should be a short text explaining what the service and
           its purpose are.

        VVEERRSSIIOONN
           The version of the running code.

  44..33..  FFlloooodd ccoonnttrrooll

  Also, since services are not affected by flood control, they can
  easily flood the IRC network with information.  They should be
  conceived so this does not happen.

  Services should implement their own flood control (for outgoing
  traffic) to be safe.











